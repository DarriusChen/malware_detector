from fastapi import FastAPI, UploadFile
from fastapi.responses import HTMLResponse, JSONResponse
from typing import Union,List
import uvicorn
from pydantic import BaseModel
from datetime import date, datetime, time
from functions import insert_info, save_upload_file
from connect_db import connect_mongoDb
from fastapi.middleware.cors import CORSMiddleware
from tensorflow import keras
import cv2

import exe2image as ei
from module import predictimage
 
app = FastAPI()
origins = ["*"]

app.add_middleware(CORSMiddleware, allow_origins=origins, allow_credentials=True, allow_methods=["*"], allow_headers=["*"])


@app.get("/")
def init():
    return {"response": "Hiiiii!"}

# exe to image process
def imageProcess(file,filename):
    # image process
    exe_path = './upload_files'
    image_path = '../predict_images'
    img = ei.exe2image(exe_path,file)
    cv2.imwrite('./%s/%s.jpg'%(image_path, filename), img) #可自行更改檔名

model=keras.models.load_model('model.h5')

@app.post("/upload",tags=["upload"])
async def upload(file:UploadFile):
    # 將資訊寫入db
    db_connect = connect_mongoDb()
    action = "upload"
    t = datetime.now().isoformat()
    des_path = './upload_files'
    file_name = file.filename

    try:
        insert_info(db_connect,action,t)

    # save files
        await save_upload_file(upload_file=file,path=des_path)
        imageProcess(file,file_name)
        result = predictimage('../predict_images/'+file_name,model) #predict process
        return {'msg':None,
                'pic':file_name+".jpg",
                'result': result
                }
    except Exception as e:
        return {'msg':str(e)}
    
    # contents = await file.read()
    
    # with open(path+"\\"+file.filename,'wb') as f:
    #     f.write(contents)


# delete file
# def deleteFile():
#     file_path = './upload_files'
#     for file in os.listdir(file_path):
#         os.remove(file)


# osquery webpage-windows
@app.get('/osq-windows',response_class=HTMLResponse)
async def osq_windows():
    osq_windows_html = open("osq_tables_windows(git).html")
    return osq_windows_html

# model prediction

if __name__ == "__main__":
    # uvicorn.run("app:app", host="localhost", port=9453, reload=True)
    uvicorn.run(app="app:app", host="0.0.0.0", port=9453)